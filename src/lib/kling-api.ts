@@ .. @@
-import { enhancedSupabase } from './supabase'
-
-// Kling AI API Configuration
-const KLING_ACCESS_KEY = 'APtpC9HaadbEHtmrANty9FNdPapNYLaD'
-const KLING_SECRET_KEY = 'eCndKhLdTTTPRRka4GE4aDhEm9LyrRyR'
-const KLING_API_BASE = 'https://api.klingai.com'
-
-interface KlingVideoRequest {
-  prompt: string
-  negative_prompt?: string
-  cfg_scale?: number
-  mode?: string
-  aspect_ratio?: string
-  duration?: string
-}
-
-interface KlingVideoResponse {
-  code: number
-  message: string
-  data: {
-    task_id: string
-    task_status: string
-  }
-}
-
-interface KlingTaskStatus {
-  code: number
-  message: string
-  data: {
-    task_id: string
-    task_status: string
-    task_status_msg: string
-    created_at: number
-    updated_at: number
-    task_result?: {
-      videos: Array<{
-        id: string
-        url: string
-        duration: number
-      }>
-    }
-  }
-}
-
-class KlingAI {
-  private accessKey: string
-  private secretKey: string
-  private baseUrl: string
-
-  constructor() {
-    this.accessKey = KLING_ACCESS_KEY
-    this.secretKey = KLING_SECRET_KEY
-    this.baseUrl = KLING_API_BASE
-  }
-
-  // Generate HMAC-SHA256 signature for authentication
-  private async generateSignature(timestamp: string, nonce: string, body: string): Promise<string> {
-    const message = `${timestamp}${nonce}${body}`
-    const encoder = new TextEncoder()
-    const keyData = encoder.encode(this.secretKey)
-    const messageData = encoder.encode(message)
-    
-    const cryptoKey = await crypto.subtle.importKey(
-      'raw',
-      keyData,
-      { name: 'HMAC', hash: 'SHA-256' },
-      false,
-      ['sign']
-    )
-    
-    const signature = await crypto.subtle.sign('HMAC', cryptoKey, messageData)
-    return Array.from(new Uint8Array(signature))
-      .map(b => b.toString(16).padStart(2, '0'))
-      .join('')
-  }
-
-  // Generate authentication headers
-  private async getAuthHeaders(body: string = ''): Promise<Record<string, string>> {
-    const timestamp = Math.floor(Date.now() / 1000).toString()
-    const nonce = Math.random().toString(36).substring(2, 15)
-    const signature = await this.generateSignature(timestamp, nonce, body)
-    
-    return {
-      'Authorization': `Bearer ${this.accessKey}`,
-      'X-Kling-Timestamp': timestamp,
-      'X-Kling-Nonce': nonce,
-      'X-Kling-Signature': signature,
-      'Content-Type': 'application/json'
-    }
-  }
-
-  // Create a video generation task
-  async createVideoTask(request: KlingVideoRequest): Promise<KlingVideoResponse> {
-    console.log('üé¨ Creating Kling AI video task with request:', request)
-    
-    const body = JSON.stringify({
-      model: 'kling-v1',
-      prompt: request.prompt,
-      negative_prompt: request.negative_prompt || '',
-      cfg_scale: request.cfg_scale || 0.5,
-      mode: request.mode || 'std',
-      aspect_ratio: request.aspect_ratio || '16:9',
-      duration: request.duration || '5'
-    })
-
-    try {
-      const headers = await this.getAuthHeaders(body)
-      console.log('üîê Generated auth headers for Kling API')
-      
-      const response = await fetch(`${this.baseUrl}/v1/videos/text2video`, {
-        method: 'POST',
-        headers,
-        body
-      })
-
-      if (!response.ok) {
-        const errorText = await response.text()
-        console.error('‚ùå Kling API error response:', errorText)
-        throw new Error(`Kling API error: ${response.status} - ${errorText}`)
-      }
-
-      const result = await response.json()
-      console.log('‚úÖ Kling AI video task created successfully:', result)
-      return result
-    } catch (error) {
-      console.error('üí• Failed to create Kling AI video task:', error)
-      throw error
-    }
-  }
-
-  // Check the status of a video generation task
-  async getTaskStatus(taskId: string): Promise<KlingTaskStatus> {
-    console.log('üîç Checking Kling AI task status for:', taskId)
-    
-    try {
-      const headers = await this.getAuthHeaders()
-      
-      const response = await fetch(`${this.baseUrl}/v1/videos/text2video/${taskId}`, {
-        method: 'GET',
-        headers
-      })
-
-      if (!response.ok) {
-        const errorText = await response.text()
-        console.error('‚ùå Kling API status check error:', errorText)
-        throw new Error(`Kling API error: ${response.status} - ${errorText}`)
-      }
-
-      const result = await response.json()
-      console.log('üìä Kling AI task status:', result)
-      return result
-    } catch (error) {
-      console.error('üí• Failed to get Kling AI task status:', error)
-      throw error
-    }
-  }
-
-  // Generate a video from project data
-  async generateVideoFromProject(projectId: string): Promise<string> {
-    console.log('üé• Starting video generation for project:', projectId)
-    
-    try {
-      // Get project data from database
-      const { data: project, error: projectError } = await enhancedSupabase
-        .from('ai_projects')
-        .select('*')
-        .eq('id', projectId)
-        .single()
-
-      if (projectError || !project) {
-        throw new Error('Project not found')
-      }
-
-      console.log('üìã Retrieved project data:', project)
-
-      // Build prompt from project data
-      let prompt = ''
-      
-      if (project.lyrics) {
-        prompt += `Music video for lyrics: "${project.lyrics.substring(0, 200)}...". `
-      }
-      
-      if (project.mood) {
-        prompt += `Mood: ${project.mood}. `
-      }
-      
-      if (project.theme) {
-        prompt += `Theme: ${project.theme}. `
-      }
-      
-      if (project.style) {
-        prompt += `Visual style: ${project.style}. `
-      }
-      
-      // Add default elements for music videos
-      prompt += 'High quality music video, cinematic lighting, professional production, vibrant colors, dynamic camera movements.'
-
-      console.log('üìù Generated prompt for Kling AI:', prompt)
-
-      // Create video generation task
-      const videoRequest: KlingVideoRequest = {
-        prompt: prompt.trim(),
-        negative_prompt: 'low quality, blurry, distorted, amateur, poor lighting',
-        cfg_scale: 0.7,
-        mode: 'std',
-        aspect_ratio: '16:9',
-        duration: '5'
-      }
-
-      const taskResponse = await this.createVideoTask(videoRequest)
-      
-      if (taskResponse.code !== 200) {
-        throw new Error(taskResponse.message || 'Failed to create video task')
-      }
-
-      const taskId = taskResponse.data.task_id
-      console.log('üéØ Kling AI task created with ID:', taskId)
-
-      // Update project with task ID and prompt
-      await enhancedSupabase
-        .from('ai_projects')
-        .update({
-          kling_task_id: taskId,
-          kling_prompt: prompt.trim(),
-          kling_negative_prompt: videoRequest.negative_prompt,
-          status: 'processing'
-        })
-        .eq('id', projectId)
-
-      console.log('üíæ Updated project with Kling task ID')
-
-      // Poll for completion
-      return await this.pollTaskCompletion(taskId, projectId)
-    } catch (error) {
-      console.error('üí• Video generation failed:', error)
-      
-      // Update project with error
-      await enhancedSupabase
-        .from('ai_projects')
-        .update({
-          status: 'failed',
-          error_message: error instanceof Error ? error.message : 'Unknown error'
-        })
-        .eq('id', projectId)
-      
-      throw error
-    }
-  }
-
-  // Poll task until completion
-  private async pollTaskCompletion(taskId: string, projectId: string): Promise<string> {
-    console.log('‚è≥ Starting to poll Kling AI task completion...')
-    
-    const maxAttempts = 60 // 10 minutes max (10 second intervals)
-    let attempts = 0
-
-    while (attempts < maxAttempts) {
-      try {
-        const status = await this.getTaskStatus(taskId)
-        
-        if (status.code !== 200) {
-          throw new Error(status.message || 'Failed to get task status')
-        }
-
-        const taskStatus = status.data.task_status
-        console.log(`üîÑ Attempt ${attempts + 1}: Task status is "${taskStatus}"`)
-
-        if (taskStatus === 'succeed') {
-          const videoUrl = status.data.task_result?.videos?.[0]?.url
-          
-          if (!videoUrl) {
-            throw new Error('Video URL not found in completed task')
-          }
-
-          console.log('üéâ Video generation completed! URL:', videoUrl)
-
-          // Update project with completed video
-          await enhancedSupabase
-            .from('ai_projects')
-            .update({
-              status: 'completed',
-              output_video_url: videoUrl,
-              completed_at: new Date().toISOString()
-            })
-            .eq('id', projectId)
-
-          console.log('üíæ Project updated with completed video URL')
-          return videoUrl
-        }
-        
-        if (taskStatus === 'failed') {
-          const errorMsg = status.data.task_status_msg || 'Video generation failed'
-          console.error('‚ùå Kling AI task failed:', errorMsg)
-          
-          await enhancedSupabase
-            .from('ai_projects')
-            .update({
-              status: 'failed',
-              error_message: errorMsg
-            })
-            .eq('id', projectId)
-          
-          throw new Error(errorMsg)
-        }
-
-        // Wait 10 seconds before next poll
-        await new Promise(resolve => setTimeout(resolve, 10000))
-        attempts++
-      } catch (error) {
-        console.error('üí• Error during task polling:', error)
-        attempts++
-        
-        if (attempts >= maxAttempts) {
-          throw error
-        }
-        
-        // Wait before retrying
-        await new Promise(resolve => setTimeout(resolve, 10000))
-      }
-    }
-
-    throw new Error('Video generation timed out')
-  }
-}
-
-export const klingAI = new KlingAI()
-export type { KlingVideoRequest, KlingVideoResponse, KlingTaskStatus }